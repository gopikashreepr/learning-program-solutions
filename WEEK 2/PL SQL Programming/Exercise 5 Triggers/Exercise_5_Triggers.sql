--  Scenario 1: Automatically update the last modified date when a customer record is updated
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;



-- Scenario 2: Maintain an audit log for all transactions
CREATE TABLE AuditLog (
    LogID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    AccountID NUMBER,
    TransactionType VARCHAR2(10),
    Amount NUMBER,
    LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (AccountID, TransactionType, Amount)
    VALUES (:NEW.AccountID, :NEW.TransactionType, :NEW.Amount);
END;


-- Scenario 3: Enforce rules on deposits and withdrawals
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    -- Get current account balance
    SELECT Balance INTO v_balance
    FROM Accounts
    WHERE AccountID = :NEW.AccountID;

    -- Withdrawal check
    IF :NEW.TransactionType = 'Withdrawal' AND :NEW.Amount > v_balance THEN
        RAISE_APPLICATION_ERROR(-20004, 'Withdrawal amount exceeds balance');
    END IF;

    -- Deposit check
    IF :NEW.TransactionType = 'Deposit' AND :NEW.Amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20005, 'Deposit amount must be positive');
    END IF;
END;

